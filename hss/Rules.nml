/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */

// based on http://reference.sitepoint.com/css

type rule_option {
	ONormal;
	OOpt;
	OMany;
}

type rule {
	RId : string;
	RHex : int;
	RUnit : string;
	RCall : (rule,rule);
	RFloat;
	RInt;
	RFloatRange : (float,float);
	RIntRange : (int, int);
	RIdent;
	RString;
	ROr : rule list;
	RMany : rule;
	RList : rule list; // comma-separated (calls, etc.)
	RGroup : rule list; // no comma
	RBind : (string, rule);
	RGroupOpt : rule list;
	RListCustom : (rule, rule_option) list;
	RGroupCustom : (rule, rule_option) list;  // order independent
}

function ids(l) { List.map RId l }

var selectors = [
	"first-child";"link";"visited";"active";"hover";"focus";"first-letter";"first-line";"before";"after"; // CSS 2.1
	"root";"last-child";"first-of-type";"last-of-type";"only-child";"only-of-type";"empty";"target";"enabled";"disabled";"checked" // CSS 3.0
]

var selectors_call = [ "lang"; "not"; "nth-child"; "nth-last-child"; "nth-last-of-type"; "nth-of-type";]

var allow_duplicate_attributes = [
	"src"; // @font-face
];
var none = RId "none"
var pct = RUnit "%"
var rlength = [RIntRange 0 0; RUnit "px"; RUnit "pt"; RUnit "pc"; RUnit "ex"; RUnit "em"; RUnit "rem"; RUnit "cm"; RUnit "mm"; RUnit "in"; RUnit "vh"; RUnit "vw";]
var runits = pct::rlength
var len = ROr rlength
var units = ROr runits

var max255 = RIntRange 0 255
var alpha = RFloatRange 0. 1.
var color = List.append [
	RHex 6; RHex 3;
	RCall (RId "rgba") (RList [max255;max255;max255; alpha]);
	RCall (RId "rgb") (RList [max255;max255;max255]);
	RCall (RId "rgba") (RList [RHex 6; alpha]);
	RCall (RId "rgba") (RList [RHex 3; alpha]);
	RCall (RId "rgba") (RList [pct;pct;pct; alpha]);
	RCall (RId "rgb") (RList [pct;pct;pct]);
] (ids ["aqua";"black";"blue";"fuchsia";"gray";"grey";"green";"lime";"maroon";"navy";"olive";"orange";"purple";"red";"silver";"teal";"white";"yellow"])

var trans_color = RId "transparent" :: color

var bstyle = ids ["none";"solid";"hidden";"dotted";"dashed";"double"]

var url = RCall RId("url") RList([RString])
var url_or_embed = ROr [url; RCall RId("embed") RList([RString])]

var inherit = RId "inherit"

var lst = ids ["none"; "circle";"disc";"square";"decimal";"lower-alpha";"lower-roman";"upper-alpha";"upper-roman"]
var lsp = ids ["inside";"outside"]

var horiz = ids ["left";"right";"center"]
var vert = ids ["top";"bottom";"center"]

var runits_auto = RId "auto" :: runits
var units_auto = ROr runits_auto

var hunits = ROr (List.append horiz runits)
var vunits = ROr (List.append vert runits)

var bgpos = [hunits; RGroup [hunits;vunits];RGroup [ROr vert;ROr horiz];]
var bgrepeat = ids ["repeat";"repeat-x";"repeat-y";"no-repeat"]
var bgattach = ids ["scroll";"fixed"]

var outline_width = List.append (ids ["thin";"medium";"thick"]) rlength
var border_width = outline_width;
var border = [
	none;
	ROr border_width;
	RGroupCustom [(ROr border_width, ONormal); (ROr bstyle, ONormal); (ROr trans_color, ONormal)];
]

// reference by Main.nml
var font_face_src = RMany (ROr [url;RGroup [url;RCall RId("format") RList([RString])]])

var pseudo_content = {
	var c = ROr [
		ROr (ids ["open-quote"; "close-quote"; "no-open-quote"; "no-close-quote"]);
		url;
		RString;
		RCall(RId "attr", RList [RIdent]);
		RCall(RId "counter" , RListCustom([(RIdent, ONormal); (ROr lst, OOpt)]));
		RCall(RId "counters", RListCustom([(RIdent, ONormal); (RString, ONormal); (ROr lst, OOpt)]));
	];
	ROr [
		ROr ([none; RId "normal"]);
		RGroupOpt [c; c; c; c; c] // repeatable
	]
}

var angle = [RUnit "deg";RUnit "rad";RUnit "grad";RUnit "turn"]
var gradient_color = [ROr color; RGroup [ROr color; RUnit "%"]]

var bgcolor = trans_color

var bgfilters =
	[
		RCall (RId "linear-gradient") RListCustom([(ROr List.concat([bgpos;angle]),OOpt); (ROr gradient_color, ONormal); (ROr gradient_color, ONormal); (ROr gradient_color, OMany)]);
	]

var layout_overflow = ids ["auto";"hidden";"scroll";"visible";"clip"]

var transform_function = {
	var num   = RFloat;
	var trans = units;
	var angle = ROr angle;
	var r_num   = RList [num];
	var r_trans = RList [trans];
	var r_angle = RList [angle];
	var r_len   = RList [len];
	var c = ROr [
		RCall (RId "matrix") (RList [num;num;num;num;num;num]);
		RCall (RId "translate") (RList [trans;trans]);
		RCall (RId "translate") r_trans;
		RCall (RId "translateX") r_trans;
		RCall (RId "translateY") r_trans;
		RCall (RId "scale") (RList [num;num]);
		RCall (RId "scale") r_num;
		RCall (RId "scaleX") r_num;
		RCall (RId "scaleY") r_num;
		RCall (RId "rotate") r_angle;
		RCall (RId "skew") r_angle;
		RCall (RId "skew") (RList [angle;angle]);
		RCall (RId "skewX") r_angle;
		RCall (RId "skewY") r_angle;
		RCall (RId "matrix3d") (RList [num;num;num;num;num;num;num;num;num;num;num;num;num;num;num;num]);
		RCall (RId "translate3d") (RList [trans;trans;len]);
		RCall (RId "translateZ") r_len;
		RCall (RId "scale3d") (RList [num;num;num]);
		RCall (RId "scaleZ") r_num;
		RCall (RId "rotate3d") (RList [num;num;num;angle]);
		RCall (RId "rotateX") r_angle;
		RCall (RId "rotateY") r_angle;
		RCall (RId "rotateZ") r_angle;
		RCall (RId "perspective") r_len;
	];
	[RGroupOpt [c; c; c; c; c]]  // repeatable
}

var filter_function = {
	var color = ROr trans_color;
	var bool = ROr [RId "true"; RId "false"];
	var i100 = RIntRange 0 100;
	var gt_0 = RIntRange 1 999;  // Integer greater than 0.
	var dir = RIntRange 0 360;
	var r_numpct = RList [ROr [RFloat; RUnit "%"]];
	function b(s, r) {(RBind(s, r), OOpt)}
	var c = ROr [ // css3 filter
		url; // url to SVG filter
		RCall (RId "blur") (RList [len]);
		RCall (RId "brightness") r_numpct;
		RCall (RId "contrast") r_numpct;
		RCall (RId "grayscale") r_numpct;
		RCall (RId "invert") r_numpct;
		RCall (RId "opacity") r_numpct;
		RCall (RId "saturate") r_numpct;
		RCall (RId "sepia") r_numpct;
		RCall (RId "hue-rotate") (RList [ROr angle]);
		RCall (RId "drop-shadow") (RListCustom [(len, ONormal); (len, ONormal); (len, OOpt); (color, OOpt)]);
	];
	[
		none;
		RGroupOpt [c; c; c; c; c]; // css3 filters, repeatable
		ROr [                      // old IE filters
			RId "xray"; RId "invert"; RId "gray"; RId "fliph"; RId "flipv";
			RCall (RId "alpha") (RListCustom [
				b("opacity", i100);
				b("style", RIntRange 0 3); // 0:uniform, 1:linear, 2:radial, 3:rectangular
				b("startx", i100);
				b("finishx", i100);
				b("starty", i100);
				b("finishy", i100);
				b("finishopacity", i100);
			]);
			RCall (RId "blur") (RListCustom [b("add",bool); b("direction",dir); b("strength",gt_0)]);  // MotionBlur
			RCall (RId "wave") (RListCustom [b("add",bool); b("freq",gt_0); b("lightstrength",i100); b("phase",i100); b("strength",gt_0)]);
		];
	]
}

var rules = List.concat [[
	// Units
	("width",runits_auto);
	("height",runits_auto);
	("top",runits_auto);
	("bottom",runits_auto);
	("left",runits_auto);
	("right",runits_auto);
	("margin-left",runits_auto);
	("margin-right",runits_auto);
	("margin-top",runits);
	("margin-bottom",runits);
	("margin",[RGroup [units_auto;units_auto;units_auto;units_auto]; units_auto; RGroup [units_auto;units_auto]; RGroup [units_auto;units_auto;units_auto]]);
	("padding-left",runits);
	("padding-right",runits);
	("padding-top",runits);
	("padding-bottom",runits);
	("min-width",runits);
	("min-height",runits);
	("max-width",none :: runits);
	("max-height",none :: runits);
	("line-height",RFloat :: runits);
	("padding", [units; RGroup [units;units]; RGroup [units;units;units;units]; RGroup [units;units;units]]);
];[
	// layout
	("display",ids ["block";"inline";"none";"inline-block";"table";"inline-table";"table-row";"table-row-group";"table-header-group";"table-footer-group";"table-column";"table-column-group";"table-cell";"table-caption";"flex";"inline-flex"]);
	("float",ids ["left";"right";"none"]);
	("clear",ids ["none";"left";"right";"both"]);
	("overflow", [ROr layout_overflow; RGroup [ROr layout_overflow; ROr layout_overflow]]);
	("overflow-x", layout_overflow);
	("overflow-y", layout_overflow);
	("text-overflow", [RId "ellipsis"; RId "clip"]); // only basic
	("position",ids ["absolute";"fixed";"relative";"static"; "sticky"]);
	("z-index",[RInt;RId "auto"]);
	("visibility",ids ["visible";"hidden"]);
	("box-sizing", ids ["content-box"; "border-box"]);
	// clip ?
]; {// Fonts and texts
	var font_size = List.append runits (ids ["xx-small";"x-small";"small";"medium";"large";"x-large";"xx-large";"smaller";"larger"])
	var font_family = RMany ROr([RIdent;RString;RGroup [RIdent;RIdent]]) // can be composed of up to 2 words
	var font_style = ids ["italic";"normal";"oblique"]
	var font_weight = List.append (ids ["bold";"normal";"bolder";"lighter"]) [RIntRange 100 100;RIntRange 200 200;RIntRange 300 300;RIntRange 400 400;RIntRange 500 500;RIntRange 600 600;RIntRange 700 700]
	var font_variant = ids ["normal";"small-caps"]
	var text_decoration_style = ids ["solid";"double";"dotted";"dashed";"wavy"]
	var rline = ROr (ids ["underline";"blink";"line-through";"overline"])
	var text_decoration_line = [none; RGroupOpt [rline; rline; rline]]
	var text_decoration = (RGroup [rline; ROr text_decoration_style; ROr color]) :: text_decoration_line;
	[
	("font",[
		RGroupOpt [ROr font_style;ROr font_variant;ROr font_weight;font_family]; // no support for /line-height notation
		ROr (ids ["caption";"icon";"menu";"message-box";"small-caption";"status-bar"]);
	]);
	("font-family",[font_family]);
	("font-size",font_size);
	("font-variant",font_variant);
	("font-weight",font_weight);
	("text-align",ids ["center";"justify";"left";"right"]);
	("text-decoration-line", text_decoration_line);
	("text-decoration-color", color);
	("text-decoration-style",text_decoration_style);
	("text-decoration", text_decoration);
	("font-style",font_style);
	("color",color);
	("text-transform",ids ["capitalize";"lowercase";"none";"uppercase"]);
	("letter-spacing",RId "normal" :: runits);
	("word-spacing",RId "normal" :: runits);
	("text-indent", runits);
	("vertical-align",List.append runits (ids ["top";"bottom";"middle";"baseline";"sub";"super";"text-bottom";"text-top"]));
	("white-space", ids ["normal";"pre";"nowrap";"pre-wrap";"pre-line"]);
	("tab-size", [RInt]);
	("line-break", ids ["auto";"loose";"normal";"strict"]);
	("word-break", ids ["normal";"keep-all";"break-all"]);
	("word-wrap", ids ["normal";"break-word"]);
	("direction", ids ["ltr";"rtl"]);
	]
};[
	// background
	("background",[
		none;
		RGroupOpt [ROr bgcolor;url_or_embed;ROr bgrepeat;ROr bgattach;vunits;hunits];
		RGroupOpt [ROr bgcolor;url_or_embed;ROr bgrepeat;ROr bgattach;hunits;vunits];
		ROr bgfilters;
	]);
	("background-color",bgcolor);
	("background-image",[url_or_embed; none]);
	("background-position",bgpos);
	("background-repeat",bgrepeat);
	("background-attachment",bgattach);
	("background-clip",ids ["border-box"; "padding-box"; "content-box"]);
	("background-origin",ids ["border-box"; "padding-box"; "content-box"]);
	("background-size",[ROr(ids ["cover"; "contain"]); units_auto; RGroup [units_auto; units_auto]]);
];[
	// borders
	("border",border);
	("border-style",bstyle);
	("border-top",border);
	("border-left",border);
	("border-right",border);
	("border-bottom",border);
	("border-width",[RGroupOpt [ROr border_width;ROr border_width;ROr border_width; ROr border_width]]);
	("border-top-width",border_width);
	("border-left-width",border_width);
	("border-right-width",border_width);
	("border-bottom-width",border_width);
	("border-top-color",trans_color);
	("border-left-color",trans_color);
	("border-right-color",trans_color);
	("border-bottom-color",trans_color);
	("border-left-style",bstyle);
	("border-right-style",bstyle);
	("border-top-style",bstyle);
	("border-bottom-style",bstyle);
	("border-bottom",border);
	("border-color",[RGroupOpt [ROr trans_color; ROr trans_color; ROr trans_color; ROr trans_color]]);
	("outline",[none; RIntRange 0 0; RGroup [ROr outline_width; ROr bstyle; ROr color]]);
	("outline-style",bstyle);
	("outline-width",outline_width);
	("outline-color",color);
	("outline-offset",runits);
];[
	// others
	("cursor", ids ["auto";"hand";"crosshair";"default";"e-resize";"help";"move";"n-rsize";"ne-resize";"nw-resize";"pointer";"progress";"s-resize";"se-resize";"sw-resize";"text";"w-resize";"wait"]);
	("opacity", [alpha]);
	("list-style", [none; RGroupOpt [ROr (List.tl lst); ROr lsp; url_or_embed]]); // remove "none" from lst
	("list-style-type", lst);
	("list-style-position", lsp);
	("list-style-image", [url_or_embed; none]);
	("table-layout", ids ["auto";"fixed"]);
	("empty-cells", ids ["show"; "hide"]);
	("border-collapse",ids ["collapse";"separate"]);
	("border-spacing",runits); // not supported on IE
	("caption-side", ids ["bottom";"top"]);
	("user-select", ids ["all";"none";"text"]);
	("resize", ids ["none";"both";"horizontal";"vertical"]);
	("counter-reset", [none; RIdent; RGroup[RIdent; RIdent]; RGroup[RIdent; RInt]; RGroup[RIdent; RInt; RIdent];]);
	("counter-increment", [none; RIdent; RGroup[RIdent; RIdent]; RGroup[RIdent; RInt]; RGroup[RIdent; RInt; RIdent];]);
	("quotes", [none; RGroup[RString; RString]; RGroup[RString; RString; RString; RString];]);
	("pointer-events", ids ["auto";"none";"all";"fill";"stroke";"painted";"visible";"visiblePainted";"visibleFill";"visibleStroke"]);
	("appearance", ids ["none";"button";"checkbox";"listbox";"radio";"textfield";]); // partial
	("filter", filter_function);
];[
	// transforms
	("transform", transform_function);
	("transform-origin", [RGroupOpt [
		hunits; // x-offset
		vunits; // y-offset
		units;  // z-offset
	]]);
	("perspective-origin", [RGroupOpt [
		hunits;
		vunits;
	]]);
	("transform-style", ids ["flat";"preserve-3d"]);
	("perspective", [none; units]);
	("backface-visible", ids ["visible";"hidden"]);
];[
	// effects (partial browser support)
	("border-radius",[units; RGroup [units;units]; RGroup [units;units;units;units]; RGroup [units;units;units]]);
	("border-top-right-radius",runits);
	("border-top-left-radius",runits);
	("border-bottom-right-radius",runits);
	("border-bottom-left-radius",runits);
	("text-shadow",[
		none;
		RMany (ROr [
			RGroup [len; len; ROr color];
			RGroup [ROr color; len; len];
			RGroup [len; len; len; ROr color];
			RGroup [ROr color; len; len; len];
		])
	]);
	("box-shadow",[
		none;
		RMany (ROr [
			RGroup [len; len; ROr color];
			RGroup [len; len; len; ROr color];
			RGroup [len; len; len; len; ROr color];
			RGroup [RId "inset"; len; len; ROr color];
			RGroup [RId "inset"; len; len; len; ROr color];
			RGroup [RId "inset"; len; len; len; len; ROr color];
		])
	]);
	// hss-specific
	("hss-width",runits_auto);
	("hss-height",runits_auto);
]; {// flex
	var rflex_direction = [RId "row"; RId "row-reverse"; RId "column"; RId "column-reverse"; RId "initial"]
	var rflex_wrap = [ RId "wrap"; RId "nowrap"; RId "wrap-reverse"; RId "initial"]
	var rflex_basis = List.append (ids ["auto";"content"]) runits
	var rflex = [
		none;
		RFloat;           // interpreted as "flex-grow"
		ROr rflex_basis;  // interpreted as "flex-basis"
		RGroup [RFloat; ROr rflex_basis];        // flex-shrink, flex-basis
		RGroup [RFloat; RFloat; ROr rflex_basis] // flex-grow, flex-shrink, flex-basis
	];
	[
	("flex", rflex);
	("flex-direction",rflex_direction);
	("flex-wrap", rflex_wrap);
	("flex-flow", [
			ROr rflex_direction;
			ROr rflex_wrap;
			RGroup [ROr rflex_direction; ROr rflex_wrap];
			RId "initial";
		]);
	("flex-grow", [RFloat; RId "initial"]);
	("flex-shrink", [RFloat; RId "initial"]);
	("flex-basis", rflex_basis);
	("align-items", [RId "stretch"; RId "center"; RId "flex-start"; RId "flex-end"; RId "baseline"; RId "initial";]);
	("justify-content", [RId "space-between"; RId "space-around"; RId "center"; RId "flex-start"; RId "flex-end"; RId "initial";]);
	("align-self", [RId "auto"; RId "flex-start"; RId "flex-end"; RId "center"; RId "baseline"; RId "stretch"]);
	("order", [RInt]);
	]
}; {// animations
	var name = [RIdent]
	var dir  = [RId "normal"; RId "reverse"; RId "alternate"; RId "alternate-reverse"]
	var mode = [none; RId "forwards"; RId "backwards"; RId "both"]
	var delay = [RUnit "s"; RUnit "ms";]
	var count = [RId "infinite"; RInt; RFloat]
	var state = [RId "running"; RId "paused"]
	var duration = delay;
	var tween = [
		RId "ease"; RId "linear";RId "ease-in"; RId "ease-out"; RId "ease-in-out"; RId "step-start"; RId "step-end";
		RCall (RId "frames") (RList [RInt]);
		RCall (RId "cubic-bezier") (RList [RFloat; RFloat; RFloat; RFloat]);
		RCall (RId "steps") (RListCustom [(RInt, ONormal); (ROr [RId "start"; RId "end"], OOpt)]);
	]
	function many(r) {RMany (ROr r)}
	function ors(li) {List.map(function(r){ROr r}, li)}
	[
	("animation", [
		none;
		RGroupOpt (ors [name; duration; tween; delay; count; dir; mode; state]);
		RGroupOpt (ors [duration; tween; delay; count; dir; mode; state; name]);
	]);
	("animation-delay", [many delay]);
	("animation-direction", [many dir]);
	("animation-duration", [many duration]);
	("animation-fill-mode", [many mode]);
	("animation-iteration-count", [many count]);
	("animation-name", [many name]);
	("animation-play-state", [many state]);
	("animation-timing-function", [many tween]);
	// transition
	("transition", [many([
		RGroup ors([name; duration;]);
		RGroup ors([name; duration; tween;]);
		RGroup ors([name; duration; tween; delay;]);
	])]);
	("transition-delay", [many delay]);
	("transition-duration", [many duration]);
	("transition-property", [many name]);
	("transition-timing-function", [many tween]);
	]
}
];

var media_rules = [
	("width",rlength);
	("min-width",rlength);
	("max-width",rlength);
	("height",rlength);
	("min-height",rlength);
	("max-height",rlength);
	//("aspect-ratio", ratio(1/2)); // not support
	("orientation", [RId "portrait"; RId "landscape"]);
	("resolution", [RUnit "dpi"; RUnit "dpcm"; RUnit "dppx"]);
	("min-resolution", [RUnit "dpi"; RUnit "dpcm"; RUnit "dppx"]);
	("max-resolution", [RUnit "dpi"; RUnit "dpcm"; RUnit "dppx"]);
	("scan", [RId "interlace"; RId "progressive"]);
	("grid", [RIntRange 0 1]);
	("update", [none; RId "slow"; RId "fast"]);
	("overflow-block", [none; RId "scroll"; RId "paged"; RId "optional-paged"]);
	("overflow-inline", [none; RId "scroll"]);
	("color", [RInt]);       // can be empty
	("min-color", [RInt]);
	("max-color", [RInt]);
	("color-index", [RInt]); // can be empty
	("min-color-index", [RInt]);
	("max-color-index", [RInt]);
	("color-gamut", [RId "srgb"; RId "p3"; RId "rec2020"]);
	("display-mode", [RId "fullscreen"; RId "standalone"; RId "minimal-ui"; RId "browser"]);
	("monochrome", [RInt]);  // can be empty
	("min-monochrome", [RInt]);
	("max-monochrome", [RInt]);
	("inverted-colors", [none; RId "inverted"]);
	("pointer", [none; RId "coarse"; RId "fine"]);
	("any-pointer", [none; RId "coarse"; RId "fine"]);
	("hover", [none; RId "hover"]);
	("any-hover", [none; RId "hover"]);
	("light-level", [RId "dim"; RId "normal"; RId "washed"]);
	("scripting", [none; RId "initial-only"; RId "enabled"]);
]