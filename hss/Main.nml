/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
open Hss.Ast;
open Hss.Rules;

exception Error : (string, pos) list;

type context {
	mutable vars : (string,value) Map.t;
	mutable blocks : (string,expr list) Map.t;
	mutable eval_rec : int;
	mutable skip_calc: int; // 0: no skip, 1: skip "/", 2 : skip ALL
	mutable ns : string option;
	mutable curblock : class option;
}
type sourcemap {
	mutable enabled : bool;
	mutable source : string;
	mutable index : int;
	mutable last_src_line : int;
	mutable last_src_col : int;
	mutable out_comma : bool;
	mutable current : int;
	mutable last : int;
	mutable bpos : int;
	mutable buf : string;
	mutable write_extern : IO.output->string -> void;
	mutable write_char   : IO.output->char   -> void;
	mutable write        : IO.output->string -> void;
	mutable pick_begin : pos -> void;
	mutable pick_data  : pos_column;
	mutable pick_end   : void -> void;
	mutable switch_on  : void -> void;
	mutable reset      : void -> void;
}
type sep_chars {
	tab   : string;
	comma : string;
	gt    : string;
	plus  : string;
	tild  : string;
	colon : string;
	lbrace: string;
	rbrace: string;
	mutable crlf  : IO.output -> void;
}
type print_mode {
	mutable cur : sep_chars;
	normal : sep_chars;
	minify : sep_chars;
	mutable enable_minify : void -> void;
	mutable is_minify     : void -> bool;
}
var pmod = {
	cur = neko "null";
	normal = { tab="\t"; comma=", "; gt=" > "; plus=" + "; tild=" ~ "; colon=": "; lbrace=" {"; rbrace="}"; crlf=function(ch) IO.write_char ch '\n'; };
	minify = { tab= "" ; comma="," ; gt= ">" ; plus= "+" ; tild= "~" ; colon=":" ; lbrace= "{"; rbrace="}"; crlf=function(ch) {} };
	enable_minify = neko "null";
	is_minify     = neko "null";
}
pmod.cur := pmod.normal;
pmod.is_minify := function() pmod.cur === pmod.minify;
pmod.enable_minify := function() pmod.cur := pmod.minify;

function error(msg,p) {
	throw Error([(msg,p)])
}

function warning(msg,p) {
	IO.printf IO.stderr "%s:%d: %s\n" (Lexer.source p,Lexer.line p,msg);
}

var sem = {
	var table = Hss.Utils.base64_encode_table;
	var m = {
		enabled=false; source=""; index=0; last_src_line=1; last_src_col=1; out_comma=false; current=0; last=0; bpos=0;
		buf = String.create(40960);
		write_extern = IO.write;
		write_char   = IO.write_char;
		write        = IO.write;
		pick_begin   = function(p) {};
		pick_data    = neko "null";
		pick_end     = function()  {};
		switch_on    = neko "null";
		reset        = neko "null";
	};
	function add_char(c: char) {
		var m = m;
		var n = m.bpos;
		if (n == String.length m.buf) then {
			var s = String.create(n * 2);
			String.blit(s, 0, m.buf, 0, n);
			m.buf := s;
		}
		neko("$sset")(m.buf, n, c);
		m.bpos := n + 1;
	}
	function add_vlq(n) {
		function rec loop(v) {
			var base = 0x20; // 0b100000
			var n64 = v and 0x1F;
			var next = v >>> 5;
			var n64 = if next > 0 then (n64 + base) else n64;
			add_char (neko("$sget")(table, n64));
			if next > 0 then loop next;
		}
		var v = if n < 0 then ((-n) << 1) + 1 else n << 1;
		loop v
	}
	function segment(di:int, line:int, col:int) {
		var m = m;
		if m.out_comma then add_char ',' else m.out_comma := true;
		add_vlq( m.current - m.last );
		add_vlq( di );
		add_vlq( line - m.last_src_line);
		add_vlq( col  - m.last_src_col );
		m.last := m.current;
		m.last_src_line := line;
		m.last_src_col  := col;
	}
	function rec find_i(f, acc, l:Hss.Utils.path list) {
		match l {
		| [] -> throw Not_found
		| x :: l -> if x.str === f then acc else find_i(f, acc + 1, l)
		}
	}
	m.reset := function() {
		var m = m;
		m.out_comma := false;
		m.source := "";
		m.index  := 0;
		m.last_src_line := 1;
		m.last_src_col  := 1;
		m.current := 0;
		m.last := 0;
		m.bpos := 0;
	}
	// overrides if switch on
	m.switch_on := function() {
		pmod.normal.crlf := function (ch:IO.output) {
			ch.out_write '\n';
			m.current := 0;
			m.last := 0;
			m.out_comma := false;
			add_char ';';
		}
		m.write_char := function(ch:IO.output, c) {
			ch.out_write c;
			m.current := m.current + 1;
		}
		m.write := function(ch:IO.output, s) {
			var len = String.length s;
			var n = ch.out_output s 0 len;
			if n != len then throw IO.Blocked;
			m.current := m.current + len;
		}
		m.write_extern := function(ch:IO.output, s) {
			var i = &0
			var cr = &0
			var len = String.length s;
			while *i < len {
				var c = neko("$sget")(s, *i);
				if c == '\n' then
					pmod.normal.crlf ch
				else if c == '\r' then
					cr := *cr + 1
				else
					ch.out_write c;
				i := *i + 1;
			}
			m.current := m.current + len - (*cr);
		}
		m.pick_begin := function (p:pos) {
			var m = m;
			var i = m.index;
			if p.psource !== m.source then {
				m.index  := find_i(p.psource, 0, *Hss.Utils.path_imports);
				m.source := p.psource;
			}
			m.pick_data := Hss.Lexer.column p;
			segment(m.index - i, m.pick_data.lmin, m.pick_data.cmin);
		}
		m.pick_end := function() {
			segment(0, m.pick_data.lmax, m.pick_data.cmax);
		}
		m.enabled := true;
	};
	m;
};

function classes_pos (l:class list):pos {
	var pp = &Lexer.null_pos;
	function merge_pos(p:pos) {
		var p2 = *pp;
		if p.pline > p2.pline then {
			pp := p;
		} else if p.pline == p2.pline && (p.pmin < p2.pmin || p.pmax > p2.pmin) then {
			pp := Lexer.punion p (*pp);
		}
	}
	function rec loop(l) match l {
	| [] ->
	| c :: tl ->
		List.iter (function((_,p)){ merge_pos p }) c.selector;
		List.iter (function((_,p)){ merge_pos p }) c.classes;
		List.iter (function((_,p)){ merge_pos p }) c.attributes;
		match c.id   { | Some(_,p) -> merge_pos p | _ -> }
		match c.node { | Some(_,p) -> merge_pos p | _ -> }
		match c.sub  { | Some c    -> loop [c]    | _ -> }
		loop tl
	}
	loop l;
	*pp;
}

function print_sep(str,f,ch,l) {
	match l {
	| [] ->
	| e::tl ->
		f ch e;
		List.iter (function(e){sem.write ch str; f ch e}) tl
	}
}

function rec print_value(ch,v) {
	match fst v {
	| VIdent i    -> sem.write ch i
	| VString s   -> sem.write ch sprintf("\"%s\"", String.unescape s)
	| VUnit (v,u) -> sem.write ch sprintf("%f%s", (v,u));
	| VFloat f    -> sem.write ch sprintf("%f", f);
	| VInt i      -> sem.write ch sprintf("%d", i);
	| VHex s      -> sem.write ch sprintf("#%s", s);
	| VBind (n,v) ->
		sem.write ch sprintf("%s=", n);  print_value ch v
	| VList l ->
		print_sep pmod.cur.comma print_value ch l
	| VGroup l ->
		print_sep " " print_value ch l
	| VUrl url ->
		sem.write ch sprintf("url(\"%s\")", String.unescape url)
	| VVar s ->
		sem.write ch sprintf("$%s", s)
	| VCall (v,vl) ->
		print_value ch v;  sem.write ch "(";  (print_sep "," print_value ch vl);  sem.write ch ")";
	| VLabel ("dup",v) ->
		print_value ch v;
	| VLabel (l,v) ->
		print_value ch v;  sem.write ch sprintf(" !%s", l);
	| VParentheses v ->
		sem.write ch "(";  print_value ch v;  sem.write ch ")";
	| VOp (op,v1,v2) ->
		print_value ch v1;  sem.write ch sprintf(" %s ", s_op op);  print_value ch v2;
	}
}

var r_ident = Regexp.build("^[a-zA-Z_][-a-zA-Z0-9_]*$");

function att_op_str(op) {
	function quote(v) if Regexp.find r_ident v 0 (String.length v) then v else "\""+v+"\"";
	match op {
	| AExists    -> ""
	| AEqual v   ->  "=" + quote(v)
	| AContain v -> "~=" + quote(v)
	| ADash v    -> "|=" + quote(v)
	| ABegin v   -> "^=" + quote(v)
	| AEnd v     -> "$=" + quote(v)
	| ASubstr v  -> "*=" + quote(v)
	}
}

function rec print_class(first,ch,c) {
	if !first then
		sem.write ch (match c.operator {
		| OpDefault -> " "
		| OpChild -> pmod.cur.gt
		| OpPreceding imm -> if imm then pmod.cur.plus else pmod.cur.tild
		| OpJoint -> ""
		})
	match c.node {
	| None -> ()
	| Some(id,_) -> sem.write ch id;
	}
	List.iter (function(((att,op),_)) {
		sem.write ch sprintf("[%s%s]", (att, att_op_str op))
	}) c.attributes;
	match c.id {
	| None -> ()
	| Some(id,_) -> sem.write ch sprintf("#%s", id);
	}
	List.iter (function((c,_)) sem.write ch sprintf(".%s", c)) c.classes;
	List.iter (function((sel,_)){
		match sel {
		| PuClass s -> sem.write ch sprintf(":%s", s);
		| PuElement s -> sem.write ch sprintf("::%s", s);
		| PuClassFn(s, a) -> sem.write ch sprintf(":%s(%s)", (s, a))
		}
	}) (List.rev c.selector);
	match c.sub {
	| None -> ()
	| Some cs ->
		print_class false ch cs;
	}
}

function rec print_media(ch, m) {
	match fst m {
	| MAnd(m1, m2) -> print_media ch m1; sem.write ch (" " + "and" + " "); print_media ch m2
	| MType(s, None) -> sem.write ch s;
	| MType(s, Some op) -> sem.write ch (op + " " + s);
	| MFeature(s, None) -> sem.write ch ("(" + s + ")")
	| MFeature(s, Some v) ->
		sem.write_char ch '(';  sem.write ch s;  sem.write ch pmod.cur.colon;
		match fst v {
		| VString s -> sem.write ch s;
		| _ -> print_value ch v;
		}
		sem.write_char ch ')'
	| MQuotes s -> sem.write ch s;
	| MList l -> print_sep pmod.cur.comma print_media ch l
	}
}

function rec print_css(ch,tabs,e) {
	match fst e {
	| EAttribute(name,val) ->
		sem.write ch tabs;
		sem.pick_begin(snd e);    (sem.write ch name);   sem.pick_end();  (sem.write ch pmod.cur.colon);
		sem.pick_begin(snd val);  (print_value ch val);  sem.pick_end();  (sem.write_char ch ';');  (pmod.cur.crlf ch);
	| EBlock(classes,el) ->
		var p = snd e;
		var p = if sem.enabled == false || p.pmax - p.pmin > 1 then p else classes_pos classes; // if flatten by @media
		sem.write ch tabs;
		sem.pick_begin p;  (print_sep pmod.cur.comma (print_class true) ch classes);  sem.pick_end();
		sem.write ch pmod.cur.lbrace;  (pmod.cur.crlf ch);
		List.iter (print_css ch (tabs+pmod.cur.tab)) el;
		sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
	| ESub el ->
		List.iter (print_css ch tabs) el
	| EMedia (v,el) ->
		match el {
		| [] ->
		| _ ->
			sem.pick_begin Lexer.punion(snd e, snd v);
			sem.write ch "@media";  sem.write_char ch ' ';  print_media ch v;
			sem.pick_end();
			sem.write ch pmod.cur.lbrace;  (pmod.cur.crlf ch);
			List.iter (print_css ch (tabs+pmod.cur.tab)) el;
			sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
		}
	| EInclude s ->
		sem.write ch tabs;
		sem.pick_begin(snd e);  (sem.write_extern ch s);  sem.pick_end();
		(pmod.cur.crlf ch);
	| EImport v -> match fst v {
		| VString s ->
			(pmod.normal.crlf ch);
			sem.pick_begin Lexer.punion(snd e, snd v); // note: cannot map pure css files
			try sem.write_extern ch IO.file_contents(s) catch { _ -> error("file error: " + s, snd e) }
			sem.pick_end();
			(pmod.normal.crlf ch);
		| _ ->
		}
	| EKeyframes (name, ks) ->
		sem.write ch tabs;
		sem.pick_begin(snd e);
		sem.write ch "@keyframes";  sem.write_char ch ' ';  sem.write ch name;
		sem.pick_end();
		sem.write ch pmod.cur.lbrace;  (pmod.cur.crlf ch);
		List.iter (print_keyframe ch (tabs+pmod.cur.tab)) ks;
		sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
	| EVar _ | EVarBlock _ | EUseBlock _ | EIfDefine _ ->
	}
}

function rec print_keyframe(ch, tabs, k) {
	sem.write ch tabs;
	sem.pick_begin(snd (fst k));
	match fst (fst k) {
	| VIdent i -> sem.write ch i;
	| VUnit(f, _) -> sem.write ch (f + "%")
	| _->
	}
	sem.pick_end();
	sem.write ch pmod.cur.lbrace; (pmod.cur.crlf ch);
	List.iter print_css(ch, tabs+pmod.cur.tab) (snd k);
	sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
}

function rec make_sub(p,c) {
	{
		node = p.node;
		id = p.id;
		classes = p.classes;
		selector = p.selector;
		attributes = p.attributes;
		operator = p.operator;
		sub = match p.sub {
			| None -> Some c
			| Some p -> Some (make_sub p c)
		};
	}
}

function rec flatten_subs(acc,e) {
	match fst e {
	| EAttribute _ -> e :: acc
	| ESub el -> List.fold flatten_subs acc el
	| _ -> acc
	}
}

function rec flatten(parents,e) {
	match fst e {
	| EVar _ | EAttribute _ | EUseBlock _ | EIfDefine _ | EVarBlock _ -> []
	| ESub el ->
		List.concat (List.map (flatten parents) el)
	| EBlock (classes,el) ->
		var classes = match parents {
			| [] -> classes
			| l -> List.concat (List.map (function(p) List.map (make_sub p) classes) parents)
		}
		var attribs = List.rev (List.fold flatten_subs [] el);
		var el = List.concat (List.map (flatten classes) el);
		match attribs {
		| [] -> el
		| _ -> (EBlock classes attribs,snd e) :: el
		}
	| EMedia (str,el) ->
		var attribs = List.rev (List.fold flatten_subs [] el);
		var el = List.concat (List.map (flatten parents) el);
		var el = match (parents,attribs) {
		| (_::_, _::_) -> (EBlock parents attribs,snd e) :: el
		| _ -> el
		}
		[(EMedia(str, el),snd e)]
	| EInclude s ->
		var s = match parents {
			| [] -> s
			| l ->
				var ch, out = IO.write_string();
				List.iter (function(c) { print_class true ch c; IO.write ch " "; }) l;
				out() + s
		}
		[(EInclude s,snd e)]
	| EImport _ | EKeyframes _ ->
		[e]
	}
}

var check_errors = &[];

function check_errors_add(e) check_errors := e :: *check_errors;

function rec check_inherit(v) {
	match (fst v) {
	| VLabel (_,v) -> check_inherit v
	| VIdent n -> n == "inherit" || n == "initial" || n == "unset"
	| _ -> false
	}
}

function fractional_part(f) { if (Math.abs f) % 1 < 0.00001 then false else true }

var last_error_value = &(VString "", Lexer.null_pos);

function rec check_rule(r, v) { check_rule_inner(&[], r, v) }

function rec check_rule_inner(rest, r, v) {
	function rec check_rule(r,v) {check_rule_inner rest r v}
	var r = match (r, fst v) {
	| (RId s, VIdent n) -> s == n
	| (RHex n, VHex s) -> String.length s == n
	| (RUnit s, VUnit(_,n)) -> s == n
	| (RCall(r,p), VCall (c,vl)) -> check_rule r c && check_rule p (VList vl,snd v)
	| (RFloat, VInt _) | (RFloat, VFloat _) -> true
	| (RInt, VInt _) -> true
	| (RInt, VFloat f) -> !(fractional_part f)
	| (RFloatRange(min,max), VInt n) -> n * 1.0 >= min && n * 1.0 <= max
	| (RFloatRange(min,max), VFloat n) -> n >= min && n <= max
	| (RIntRange(min,max), VInt n) -> n >= min && n <= max
	| (RIntRange(min,max), VFloat f) -> !(fractional_part f) && (Math.floor f) >= min && (Math.floor f) <= max
	| (ROr rl,_) -> List.exists (function(r) check_rule r v) rl
	| (RIdent, VIdent _) -> true
	| (RString, VString _) -> true
	| (_,VLabel (_,v)) -> check_rule r v
	| (RMany r, VList vl) -> List.all (check_rule r) vl
	| (RMany r, _) -> check_rule r v
	| (RGroup rl, _) ->
		function rec loop(rl, vl) match (rl, vl) {
		| ([], _) -> true
		| (r :: rl, v :: vl) ->
			rest := vl;
			if (check_rule r v) then loop rl (*rest) else false
		| _ -> false
		}
		match (fst v) {
		| VGroup vl -> (loop rl vl) && (*rest == [])
		| VList _ -> false
		| _ -> loop rl (v::*rest)
		}
	| (RGroupOpt rl, _) ->
		function rec loop(rl, vl) match (rl, vl) {
		| ([], _) | (_ ,[]) -> true
		| (r :: rl, v :: vl) ->
			rest := vl;
			if !(check_rule r v) then rest := v :: vl;
			loop rl (*rest)
		| _ -> false
		}
		match (fst v) {
		| VGroup vl -> (loop rl vl) && (*rest == [])
		| VList _ -> false
		| _ -> loop(rl, v::*rest) && (*rest == [] || v !== List.hd(*rest)) // Match at least one value
		}
	| (RGroupCustom rl, _) ->
		var used = &[];
		function rec loop(rl, vl) match vl {
		| [] -> List.none (function(r) match (snd r) {| ONormal -> true | _ -> false}) rl
		| v :: vl ->
			rest := vl
			var ok = &false
			var prev = &vl
			function rec filter(rl, v) match rl {
			| [] -> rl
			| r :: rl ->
				ok := check_rule (fst r) v
				if (*ok) then {
					prev := *rest;
					match (snd r) {
					| OMany -> (used := r :: *used); r :: rl
					| _ -> rl
					}
				} else {
					rest := *prev;
					match (snd r) {
					| OMany when List.exists(function(x) x === r, *used) -> (filter rl v)
					| _ -> r :: (filter rl v)
					}
				}
			}
			var rl = filter rl v;
			if (*ok) then loop rl (*rest) else {rest := v::*rest; loop rl []} // goto List.none
		}
		match (fst v) {
		| VGroup vl -> (loop rl vl) && (*rest == [])
		| VList _ -> false
		| _ -> loop(rl, v::*rest) && (*rest == [] || v !== List.hd(*rest))
		}
	| (RList rl, VList vl) ->
		function rec loop(rl, vl) match(rl, vl) {
		| ([], []) -> true
		| (r :: rl, v :: vl) -> (check_rule r v) && (loop rl vl)
		| _ -> false
		}
		loop rl vl
	| (RListCustom rl, VList vl) ->
		function rec loop(rl,vl) {
			match (rl,vl) {
			| ([], []) -> true
			| ((r,m) :: rl, v :: vl) ->
				var ok = check_rule r v;
				match m {
				| ONormal -> if ok then loop rl vl else false
				| OOpt -> if ok then loop rl vl else loop rl (v :: vl)
				| OMany -> if ok then loop ((r,m) :: rl) vl else loop rl (v :: vl)
				}
			| ((_,m) :: rl,[]) ->
				match m {
				| ONormal -> false
				| OOpt | OMany -> loop rl vl
				}
			| ([],_) ->
				false
			}
		}
		loop rl vl
	| (ROp ((s,r1,r2)::_,m), VOp(o,v1,v2)) ->
		match m {
		| ONormal -> // ratio: e.g: font: 16px/1.2 consolas
			function rec loop(r, v) match (fst v) {
			| VOp _ -> false
			| _ -> check_rule r v
			}
			Hss.Ast.s_op o == s && loop r1 v1 && loop r2 v2
		| _  -> true // TODO: for "grid-area", the Parser cannot correctly recognize the value such as "span 2 / span 3"
		             // TODO: "calc(expr)" is hard to check
		}
	| (RBind (s,r), VBind (n,v)) when s == n ->
		check_rule r v
	| _ -> false
	}
	if !r then last_error_value := if *rest == [] then v else List.hd (*rest);
	r
}

var hrules = {
	var h = Hashtbl.create();
	List.iter (function((a,b)) Hashtbl.add h a b) Hss.Rules.rules;
	h
}

function get_rule(ctx, name) {
	try
		Hashtbl.find hrules name
	catch {
	| Not_found ->
		function invalid(s) throw Invalid_argument("Unexpected " + "'" +  s + "'" + " here");
		match (name,ctx.curblock) {
		| ("src",Some { node = Some (s,_) }) ->
			if s == "@font-face" then [Hss.Rules.font_face_src] else invalid name
		| ("content", Some{selector=((PuClass s),_)::_}) | ("content", Some{selector=((PuElement s),_)::_}) ->
			if s == "before" || s == "after" then Hss.Rules.pseudo_content else invalid name
		| _ -> throw Not_found
		}
	}
}

function custom_calls(id, vl, p, vcall) {
	function exit() { throw Exit }
	function cint(i, p) {
		if (i < 0 || i > 255) then check_errors_add ("OutOfRange " + i, p);
		i
	}
	function mix(ds, dl) {
		var r, g, b, i = (match vl {
		| [(VHex h, p); (VUnit(i,"%"),_)] ->
			var r, g, b = Hss.Utils.ofhex h p;
			(r, g, b, i)
		| [(VCall((VIdent "rgb",_),[(VInt r,rp);(VInt g,gp);(VInt b,bp)]),_); (VUnit(i,"%"),_)] ->
			(cint r rp, cint g gp, cint b bp, i)
		| _ ->
			exit()
		})
		var h, s, l = Hss.Utils.rgb2hsl r g b
		var r, g, b = Hss.Utils.hsl2rgb h (i * ds + s) (i * dl + l);
		VHex (sprintf "%.6X" ((r << 16) + (g << 8) + b))
	}
	(match id {
	| "lighten" ->    mix( 0.  ,  0.01)
	| "darken" ->     mix( 0.  , -0.01)
	| "saturate" ->   mix( 0.01,  0.  )
	| "desaturate" -> mix(-0.01,  0.  )
	| "invert" ->
		var r, g, b = (match vl {
		| [(VHex h, p)] -> Hss.Utils.ofhex h p
		| [(VCall((VIdent "rgb",_),[(VInt r,rp);(VInt g,gp);(VInt b,bp)]),_)] -> (cint r rp, cint g gp, cint b bp)
		| _ -> exit()
		})
		var r, g, b = (255 - r, 255 - g, 255 - b);
		VHex (sprintf "%.6X" ((r << 16) + (g << 8) + b))
	| "int" ->
		match vl {
		| [(VFloat f, _)] -> VInt Math.floor(f)
		| [(VUnit (f,u), _)] -> VUnit Math.ffloor(f) u
		| _ -> exit()
		}
	| _ -> vcall
	}, p)
}

function rec eval(ctx,v) {
	match fst v {
	| VIdent _
	| VString _
	| VUnit _
	| VUrl _
	| VInt _
	| VFloat _
	| VHex _ -> v
	| VList vl ->
		function rec loop(vl) match vl {
		| [] -> vl
		| v :: tl ->
			var v = eval ctx v;
			match fst v {
			| VList l -> List.append (loop l) (loop tl)
			| _ -> v :: loop tl
			}
		}
		(VList (loop vl),snd v)
	| VGroup vl ->
		(VGroup (List.map (eval ctx) vl),snd v)
	| VVar name ->
		if ctx.eval_rec > 100 then error "Invalid loop in variable expension" snd(v);
		var val = (try Map.find ctx.vars name catch { Not_found -> error ("Variable not declared '" + name + "'") snd(v) });
		ctx.eval_rec := ctx.eval_rec + 1;
		var r = eval ctx val;
		ctx.eval_rec := ctx.eval_rec - 1;
		r
	| VCall(i,vl) ->
		var i = match eval ctx i { | (VString s,p)->(VIdent s,p) | i->i }; // strip quotes
		var id = match (fst i) { | VIdent n -> n | _ -> "" }
		var prev = ctx.skip_calc;
		ctx.skip_calc := if (id == "calc") then 2 else 0;
		var vl = List.map (eval ctx) vl;
		ctx.skip_calc := prev;
		var vcall = VCall i vl;
		try custom_calls(id, vl, pos v, vcall) catch { Exit -> (vcall, pos v) }
	| VLabel (l,v1) ->
		(VLabel l (eval ctx v1), snd v)
	| VBind(name,v1) ->
		(VBind name (eval ctx v1), snd v)
	| VParentheses e ->
		if ctx.skip_calc == 2 then // keep "()" for CSS "calc(expr)"
			(VParentheses (eval ctx e), snd v)
		else {
			var prev = ctx.skip_calc;
			ctx.skip_calc := 0;
			var v = eval ctx e;
			ctx.skip_calc := prev;
			v
		}
	| VOp (op,v1,v2) ->
		var v1 = eval ctx v1;
		var v2 = eval ctx v2;
		function fop (x:float,y:float) {
			match op {
			| Add -> x + y
			| Sub -> x - y
			| Mul -> x * y
			| Div -> if y == 0. then error "Division by 0" snd(v) else x / y
			| And | Or | Xor | BoolOr | BoolAnd -> error ("UnSupported "+"Op: "+s_op op) snd(v)
			}
		};
		function rec loop(v1,v2) {
			match (fst v1,fst v2) {
			| (VInt x, VInt y) ->
				var f = fop(x * 1.0, y * 1.0);
				if (fractional_part f) then VFloat ( Math.fround(f * 1000.) / 1000. ) else VInt (Math.floor f)
			| (VInt x, VFloat y) -> VFloat (fop (x * 1.0) y)
			| (VFloat x, VInt y) -> VFloat (fop x (y * 1.0))
			| (VFloat x, VFloat y) -> VFloat (fop x y)
			| (VUnit (x,u), VUnit (y,u2)) when u == u2 -> VUnit (fop x y) u
			| (VUnit (x,u), VInt y) -> VUnit (fop x (y * 1.0)) u
			| (VUnit (x,u), VFloat y) -> VUnit (fop x y) u
			| (VInt x, VUnit (y,u)) -> VUnit (fop (x * 1.0) y) u
			| (VFloat x, VUnit (y,u)) -> VUnit (fop x y) u
			| (VHex c, VFloat a) ->
				// assume color operation
				function color(c:int) {
					var c = Math.round (fop (c * 1.0) a);
					if c < 0 then 0 else if c > 255 then 255 else c;
				}
				var r, g, b = Hss.Utils.ofhex(c, snd v1);
				var r, g, b = (color r, color g, color b);
				VHex (sprintf "%.6X" ((r << 16) or (g << 8) or b))
			| (_,VLabel (l,v)) ->
				VLabel l (loop v1 v, snd v)
			| _ ->
				error ("'" + (s_value v) + "' are not allowed") snd(v)
			}
		}
		if (op == Div && ctx.skip_calc == 1) || ctx.skip_calc == 2 then
			(VOp op v1 v2,snd v)
		else
			(loop v1 v2,snd v)
	}
}

function rec eval_block(ctx,b) {
	function add(r,v2) {
		r := fst (eval ctx (VOp Add (*r,snd v2) v2,snd v2))
	}
	function get_block_sizes(el) {
		var matched = Hashtbl.create();
		function set(k) {
			if Hashtbl.exists matched k then false else {
				Hashtbl.add matched k ();
				true;
			}
		}
		var lr = &(VInt 0);
		var tb = &(VInt 0);
		List.iter (function(e) {
			match fst e {
			| EAttribute (name,v) ->
				match name {
				| "padding-left" when set "pl" -> add lr v
				| "padding-right" when set "pr" -> add lr v
				| "padding-top" when set "pt" -> add tb v
				| "padding-bottom" when set "pb" -> add tb v
				| "padding" ->
					var t, r, b, l = match fst v {
					| VGroup [tb;rl] -> (tb, rl, tb, rl)
					| VGroup [t;rl;b] -> (t, rl, b, rl)
					| VGroup [t;r;b;l] -> (t, r, b, l)
					| _ -> (v, v, v, v)
					}
					if set "pl" then add lr l;
					if set "pr" then add lr r;
					if set "pt" then add tb t;
					if set "pb" then add tb b;
				| "border-left-width" when set "bl" -> add lr v
				| "border-right-width" when set "br" -> add lr v
				| "border-top-width" when set "bt" -> add tb v
				| "border-bottom-width" when set "bb" -> add tb v
				| "border" ->
					var v = match fst v {
						| VGroup (v :: _) -> v
						| _ -> v
					};
					if set "bl" then add lr v;
					if set "br" then add lr v;
					if set "bt" then add tb v;
					if set "bb" then add tb v;
				| _ -> ()
				}
			| _ -> ()
			}
		}) (List.rev el);
		(*lr, *tb)
	}
	match fst b {
	| EBlock (cl,el) ->
		var el = List.map (function(e) {
			match fst e {
			| EAttribute (name,val) ->
				var p = snd val;
				match name {
				| "hss-width" ->
					var w, _ = get_block_sizes el;
					(EAttribute("width", eval ctx (VOp(Sub,val,(w,p)),p)),p)
				| "hss-height" ->
					var _, h = get_block_sizes el;
					(EAttribute("height", eval ctx (VOp(Sub,val,(h,p)),p)),p)
				| _ -> e
				}
			| _ -> assert()
			}
		}) el;
		(EBlock cl el, snd b)
	| EMedia (ml,el) ->
		(EMedia ml (List.map (eval_block ctx) el), snd b)
	| _ ->
		b
	}
}

function rec expand_val(value) {
	var p = snd value;
	match fst value {
	| VCall((VIdent "rgba",_) as c,[(VHex h,hp);(VFloat f,fp)]) ->
		var r, g, b = Hss.Utils.ofhex h hp;
		var params = [(VInt r,hp);(VInt g,hp);(VInt b,hp);(VFloat f,fp)];
		expand_val (VCall c params, p)
	| VCall((VIdent "embed",p1), [(VString url, p2)]) ->
		(VCall (VIdent "url",p1) [(VString Hss.Utils.img_to_base64(url, p2), p2)], p)
	| VCall (v,vl) ->
		(VCall expand_val(v) (List.map expand_val vl), p)
	| VList vl ->
		(VList (List.map expand_val vl),p)
	| VGroup vl ->
		(VGroup (List.map expand_val vl),p)
	| VLabel (l,v) ->
		(VLabel l expand_val(v),p)
	| VBind (name,v) ->
		(VBind name expand_val(v),p)
	| VOp (op,v1,v2) ->
		(VOp op expand_val(v1) expand_val(v2),p)
	| VUnit(0., u) ->
		if (u == "s" || u == "ms" || u == "%") then value else (VInt 0, p)
	| _ ->
		value
	}
}


function rec expand_hacks(name,value,p) {
	var label = &None;
	var value = match fst value {
		| VLabel(l,v) -> label := Some (l,snd value); v;
		| _ -> value;
	}
	var value = expand_val value;
	var w = match name {
	| "background-color" | "color" | "background" ->
		var first = match fst value { VGroup v :: l -> v | _ -> value };
		match fst first {
		| VCall ((VIdent "rgba",_),[r;g;b;a]) ->
			var hcol = String.concat "" (List.map (function(c) {
				match fst c {
				| VInt i -> sprintf "%.2X" i
				| VUnit (f,"%") ->
					var i = Math.floor (f * 2.55);
					sprintf "%.2X" (if i < 0 then 0 else if i > 255 then 255 else i)
				| _ -> assert()
				}
			}) [r;g;b]);
			(ESub [
				(EAttribute name (VHex hcol,p),p); // simply adds a fallback with fixed hex color
				(EAttribute name value,p);
			],p)
		| _ ->
			(EAttribute name value,p)
		}
	| _ ->
		(EAttribute name value,p)
	}
	match *label {
	| None -> w
	| Some (label,p) ->
		function rec wrap(e) {
			(match fst e {
			| ESub el -> ESub (List.map wrap el)
			| EAttribute (name,v) -> EAttribute name (VLabel label v,p)
			| _ -> assert()
			},snd e)
		}
		wrap w
	}
}

function rec expand_ns(ns,c) {
	c.classes := List.map ( function((c:string,p)) (ns + c,p) ) c.classes;
	match c.id {
	| None -> ()
	| Some (id,p) -> c.id := Some (ns + id,p)
	}
	match c.sub {
	| None -> ()
	| Some c -> expand_ns ns c
	}
}

function rec check_class(ctx, c) {
	List.iter (function((sel,p)){
		match sel {
		| PuElement s ->
			if !(List.mem(s, pseudo_elements) || (snd Hss.Utils.vendor_prefix(s) != "")) then
				check_errors_add ("Invalid '" + "::" + s + "'", p);
		| _ ->
		}
	}) c.selector
	match c.sub {
	| None -> ()
	| Some c -> check_class ctx c
	}
}

function rec find_subclass(c: class) {
	match c.sub {
	| Some sc -> find_subclass sc
	| None -> c
	}
}

function load_rules(find, name, value, p) {
	try {
		var rules = find name
		if !(List.exists (function(r) check_rule r value) rules) && !(check_inherit value) then {
			var buf, str = IO.write_string();
			print_value buf (*last_error_value);
			check_errors_add ("Invalid '"+name+"' value '"+str()+"'", pos (*last_error_value))
		}
	} catch {
	| Not_found -> if snd(Hss.Utils.vendor_prefix name) == "" then
		check_errors_add ("Unknown attribute '"+name+"'", p)
	| Invalid_argument s ->
		check_errors_add (s, p)
	}
}

var media_hrules = {
	var h = Hashtbl.create();
	var smin = "min"+"-";
	var smax = "max"+"-";
	List.iter (function((a,b)) {
		Hashtbl.add h a b;
		Hashtbl.add h (smin + a) b;
		Hashtbl.add h (smax + a) b;
	}) (fst Hss.Rules.media_rules);
	List.iter (function((a,b)) Hashtbl.add h a b) (snd Hss.Rules.media_rules);
	h
}

function rec check_media(ctx, m: media) {
	var p = pos m;
	function err(s) check_errors_add ("Invalid '" + s + "'", p)
	match fst m {
	| MAnd(m1, m2) ->
		(MAnd(check_media ctx m1, check_media ctx m2), p);
	| MType(s, _) ->
		if !List.mem(String.lowercase s, Hss.Rules.media_types) then err s;
		m
	| MFeature(s, None) ->
		if !List.exists(function((k,_)) k == String.lowercase s, fst Hss.Rules.media_rules) then err s;
		m
	| MFeature(s, Some v) ->
		var v = eval ctx v;
		match fst v {
		| VString _ -> () // skip
		| _ -> load_rules(Hashtbl.find media_hrules, String.lowercase s, v, p)
		}
		(MFeature(s, Some v), p)
	| MQuotes _ ->
		m
	| MList l ->
		(MList List.map(check_media ctx, l), p)
	}
}

// simple detection only, cannot detect circular references
function selfref_var(id, v) {
	match fst v {
	| VVar name when id == name -> error("Self referencing loop: " + id + " = $" + id, pos v)
	| _ ->
	}
}

function rec selfref_block(redef, id, l) {
	match l {
	| [] ->
	| e::tl ->
		match fst e {
		| EUseBlock(name, _) ->
			if name == id && (*redef) == false then error("Self referencing loop: " + "$" + id, pos e);
		| EVarBlock(name, el) ->
			var r = *redef; (selfref_block redef id el); redef := r;
			if name == id && (*redef) == false then redef := true;
		| EBlock(_,el) ->
			var r = *redef; (selfref_block redef id el); redef := r;
		| _ ->
		}
		selfref_block redef id tl;
	}
}

function rec check(ctx,e) {
	match fst e {
	| EVar ("namespace",value) ->
		match fst value {
		| VString s -> ctx.ns := Some s;
		| _ -> error ("String value require for " + "namespace") snd(value);
		}
		e
	| EVar (name,value) ->
		selfref_var name value;
		ctx.vars := Map.add ctx.vars name value;
		e
	| EVarBlock (name,el) ->
		var redef = &false;
		selfref_block redef name el;
		ctx.blocks := Map.add ctx.blocks name el;
		e
	| EBlock (classes,el) ->
		match ctx.ns {
		| None -> ()
		| Some ns -> List.iter (expand_ns ns) classes
		}
		var old = (ctx.vars,ctx.blocks);
		var old2 = (ctx.ns, ctx.curblock);
		ctx.curblock := match classes { a::_ -> Some(find_subclass a) | _ -> None };
		var el = List.map (check ctx) el;
		List.iter (check_class ctx) classes;
		// check duplicate variables
		ignore(List.fold (function(acc,e) {
			match fst e {
			| EAttribute(name,v) ->
				match fst v {
				| VLabel ("dup",_) ->
					acc
				| _ ->
					try {
						var v2 = Map.find acc name;
						if !(List.mem name Hss.Rules.allow_duplicate_attributes) then warning ("Warning, duplicate attribute '"+name+"'") snd(e);
					} catch {
						Not_found -> ()
					}
					Map.add acc name v
				}
			| ESub _ -> acc // don't take into account sub-blocks (rgba)
			| _ -> acc
			}
		}) Map.empty() el);
		ctx.vars := fst old;
		ctx.blocks := snd old;
		ctx.ns := fst old2;
		ctx.curblock := snd old2;
		(EBlock classes el,snd e)
	| EAttribute (name,value) ->
		var value = eval ctx value;
		var p = pos e;
		var value = match value {
		| (VCall ((VIdent "CSS",_),vl),_) -> var value = match vl { // strip CSS
			| [(VString s, p)] -> (VIdent s, p) // strip quotes
			| [value] -> value
			| _ -> (VList vl,p)
			}
			(VLabel "dup" value, p) // allow duplicate
		| _ ->
			load_rules(get_rule ctx, name, value, p);
			value
		}
		expand_hacks(name, value, p)
	| EUseBlock(name, pl) ->
		var p = pos e;
		var b = try Map.find ctx.blocks name catch { Not_found -> error ("Variable not declared '" + name + "'") p };
		var old_ns, old_vars, old_blocks = (ctx.ns, ctx.vars, ctx.blocks);
		List.iter (function(v){
			match fst v {
			| VBind(name, value) ->
				selfref_var name value;
				ctx.vars := Map.add ctx.vars name value;
			| _ ->
			}
		}) pl;
		var no = (String.get name 0) != '_';
		try {
			if no then {
				var b = List.map (check ctx) b;
				ctx.ns := old_ns;
				ctx.vars := old_vars;
				ctx.blocks := old_blocks;
				(ESub b, p)
			} else {
				var locals = &Map.empty();
				var b = List.map (function(e){
					match fst e {
					| EVar (name,value) when name != "namespace" ->
						selfref_var name value;
						locals := Map.add (*locals) name value;
					| _ ->
					}
					check ctx e;
				}) b;
				ctx.vars := old_vars;
				Map.iter (function(name, value) ctx.vars := Map.add ctx.vars name value) (*locals);
				(ESub b, p)
			}
		} catch {
		| Error l -> throw Error(("Included here ",p)::l)
		}
	| EIfDefine((name, t), b) ->
		function rec loop(name, t, b, pr, pt) {
			var r = match (pr, pt) {
			| (true, false) -> true  //  ( true, ||)
			| (false, true) -> false //  (false, &&)
			| _ -> Map.exists ctx.vars name;
			}
			match fst b {
			| EIfDefine ((name, t2), b) -> loop name t2 b r t
			| _ ->
				var next = if t then r else !r;
				if next then check ctx b else (ESub [], pos b)
			}
		}
		loop name t b true true;
	| ESub el ->
		(ESub (List.map (check ctx) el),snd e)
	| EMedia (l,el) ->
		(EMedia (check_media ctx l) (List.map (check ctx) el), snd e)
	| EInclude _ ->
		e
	| EImport v ->
		var p = pos e;
		if ctx.curblock != None then error("Unexpected " + "@import" + " here", p)
		var s = match eval ctx v {
		| (VString s,_) when s != "" -> s
		| v -> error("Unexpected " + "@import" + "("+ (s_value v) +")", p)
		}
		var parent = Hss.Utils.path_find(Lexer.source p);
		var file = if parent.dir == "" || Hss.Utils.is_abs_path(s) then s else parent.dir + "/" + s;
		var path, added = Hss.Utils.path(file, "hss");
		if added then match path.ext {
			| "hss"	->
				var ch = try (IO.read_file path.full true) catch { _ -> error("file error: " + path.str, p) }
				var lex = Lexer.create Buffer.create();
				Lexer.input lex (path.str) ch 1 0;
				var el = Hss.Parser.parse lex;
				IO.close_in ch;
				var no = (String.get path.name 0) != '_';
				var old_ns = ctx.ns;
				var old_vars = ctx.vars;
				var old_blocks = ctx.blocks;
				var el = List.map (check ctx) el;
				if no then {
					ctx.ns := old_ns;
					ctx.vars := old_vars;
					ctx.blocks := old_blocks;
				}
				(ESub el, p)
			| "css" ->
				(EImport (VString path.str, pos v), p)
			| _ ->
				error("UnSupported " + "Type: " + "." + path.ext, p)
			}
		else
			(ESub [], p) // duplicate, simply ignore it;
	| EKeyframes (name, sl) ->
		if ctx.curblock != None then error("Unexpected " + "@keyframes" + " here", pos e)
		function rec loop(l) match l {
		| [] -> l
		| seg :: l -> match fst seg {
			| (VIdent i,p) -> if !(i == "from" || i == "to") then check_errors_add ("Unexpected " + i, p)
			| (VUnit (f, u),p) -> if (f < 0. || f > 100.) then check_errors_add ("Unexpected " + f + u, p)
			| _ -> // never run to here since Parser
			}
			var attribs = List.rev List.fold(flatten_subs, [], snd seg); // only attributes
			if attribs == [] then loop l else (fst seg, List.map(check ctx, attribs)) :: loop l
		}
		var sl = loop sl;
		if sl == [] then (ESub [], pos e) else (EKeyframes(name, sl), pos e)
	}
}

function merge_media(el) {
	function rec filter(l, out) match l {
	| [] -> l
	| v :: l -> match fst v {
		| EMedia(m,e) ->
			var ch, str = IO.write_string();
			print_media ch m;
			out := (str(), e, m, pos v) :: *out;  // (str, el, ml, pos), str is used for compare
			filter l out
		| _ ->
			v :: (filter l out)
		}
	}
	function rec combine(l, ts, out) match l {
	| [] -> l
	| (s,e,_,_) :: tl ->
		if (s == ts) then {
			out := List.append(*out, e);
			combine tl ts out
		} else {
			(List.hd l) :: (combine tl ts out)
		}
	}
	function rec loop(l) match l {
	| [] -> []
	| (s,e,m,p) :: l ->
		var e = &e;
		var l = combine l s e;
		(EMedia(m, *e), p) :: loop l
	}
	var rl = &[];
	var el = filter el rl;
	var ml = loop List.rev(*rl);
	List.append el ml
}

function display(msg,p) {
	if p == Lexer.null_pos then	{
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" msg
	} else {
		var pc = Hss.Lexer.column(p);
		IO.printf IO.stderr "%s:%d: %d-%d: %s\n" (Lexer.source p, pc.lmin, pc.cmin, pc.cmax_on, msg);
	}
}

function report(msg,p) {
	display msg p;
	Sys.exit(-1);
}

try {
	var head = "HSS v1.7 - (c)2008-2019 Nicolas Cannasse\nUsage : hss [options] <file>";
	var files = &[];
	var output = &None;
	var decl = [
		("-output",Args.String (function(o) output := Some o),"<dir> : specify output directory");
		("-D",Args.String Hss.Parser.add_defines,"<flag>     : define a conditional compilation flag");
		("--minify",Args.Void pmod.enable_minify,"     : minify output by removing some whitespaces");
		("--sourcemap", Args.Void sem.switch_on,"  : outputs a v3 sourcemap file");
	];
	Args.parse head decl (function(file) files := file :: *files);
	List.iter (function(file) {
		var path,_ = Hss.Utils.path file "";
		// parse
		var ch = IO.read_file (path.str) true;
		var lex = Lexer.create Buffer.create();
		Lexer.input lex (path.str) ch 1 0;
		var el = Hss.Parser.parse lex;
		IO.close_in ch;
		// check + replace vars
		var ctx = { vars = Map.empty(); blocks = Map.empty(); eval_rec = 0; skip_calc = 1; ns = None; curblock = None; };
		var el = List.map (check ctx) el;
		if *check_errors != [] then throw Error(*check_errors);
		// flatten
		var el = List.concat (List.map flatten([]) el);
		// final eval
		var el = List.map eval_block(ctx) el;
		// combine/merge media queries if there is no `-D no_merge_media` and no --sourcemap
		var el = if sem.enabled || Hss.Parser.defines_has("no_merge_media") then el else merge_media el;
		// write
		var file2 = Sys.without_extension file + ".css";
		var file2 = match *output {| None -> file2 | Some dir ->
			var slash = String.get dir ((String.length dir) - 1);
			(if slash == '/' || slash == '\\' then dir else dir + "/") + Sys.without_dir file2
		};
		if file != file2 then {
			var fmap = file2 + ".map";
			var ch = IO.write_file file2 true;
			List.iter (print_css ch "") el;
			if sem.enabled then IO.write ch ("\n/*# sourceMappingURL=" + (Sys.without_dir fmap) + "*/");
			IO.close_out ch;
			if sem.enabled then {
				var ch = IO.write_file fmap true;
				Hss.Utils.sourcemap_write(ch, file2, sem.buf, sem.bpos);
				IO.close_out ch;
			}
		}
		sem.reset();
		Hss.Utils.path_reset()
	}) (*files);
} catch {
	// todo : fix a small bug in nekoml to have ctx.current not to lowercase
	// in order to get correct constructor hashing
	| Hss.Lexer.Error(msg,pos) -> report Hss.Lexer.error_msg(msg) pos
	| Hss.Parser.Error(msg,pos) -> report Hss.Parser.error_msg(msg) pos
	| Hss.Utils.Error(msg,pos) -> report msg pos
	| Error l -> List.iter (function((msg,p)) display msg p) List.rev(l); Sys.exit (-1);
	| e ->
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" string(e);
		Sys.exit (-1);
}